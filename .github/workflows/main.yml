name: Release Dovast

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 0


    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Install Requirements.txt
      run: pip install -r requirements.txt

    - name: Run PowerShell script
      shell: pwsh
      run: |
        New-Item -ItemType Directory -Path .\Dovast-Compiled
        pyinstaller --onefile --name Dovast --icon=..\assets\icon.ico --distpath Dovast-Compiled/Dist --workpath Dovast-Compiled/Build --specpath Dovast-Compiled --distpath .\Dovast-Compiled index.py
        New-Item -ItemType Directory -Path .\Dovast-Compiled\keys
        Copy-Item -Path .\config.json -Destination .\Dovast-Compiled\
        Copy-Item -Path .\keys\mouse-example.json -Destination .\Dovast-Compiled\keys\
        Copy-Item -Path .\keys\keyboard-example.json -Destination .\Dovast-Compiled\keys\
        Copy-Item -Path .\keys\slide-example.json -Destination .\Dovast-Compiled\keys\
        Remove-Item -Path .\Dovast-Compiled\Build -Recurse
        Remove-Item -Path .\Dovast-Compiled\Dovast.spec
        exit

    - name: Get Latest Tag and Calculate Next Version
      id: get_version
      run: |
        $latest_tag = git describe --tags --abbrev=0 2>$null

        if (-not $latest_tag) {
            Write-Host "No tags found. Setting initial version to v1.0"
            $latest_tag = "v1.0"
        } else {
            Write-Host "Latest tag found: $latest_tag"
        }

        if ($latest_tag -match '^v(\d+)\.(\d+)$') {
            $major = [int]$matches[1]
            $minor = [int]$matches[2]
        } else {
            Write-Host "Tag format invalid. Resetting to v1.0"
            $major = 1
            $minor = 0
        }

        if ($minor -lt 9) {
            $minor += 1
        } else {
            $minor = 0
            $major += 1
        }

        $new_version = "v$major.$minor"
        Write-Host "Next version: $new_version"

        echo "::set-output name=new_version::$new_version"

    - name: Zip Dovast-Compiled
      shell: pwsh
      run: |
        Compress-Archive -Path .\Dovast-Compiled\* -DestinationPath .\Dovast-Compiled.zip

    - name: Debug Version
      run: |
        echo "LATEST_TAG=${{ env.LATEST_TAG }}"
        echo "NEW_VERSION=${{ env.NEW_VERSION }}"


    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.get_version.outputs.new_version }}
        release_name: Release ${{ steps.get_version.outputs.new_version }}
        draft: false
        prerelease: false


    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN  }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: .\Dovast-Compiled.zip
        asset_name: Dovast-Compiled.zip
        asset_content_type: application/zip
